"use client"

import React, { useState, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Separator } from '@/components/ui/separator'
import { Clock, CheckCircle, XCircle, AlertCircle, Download, Trophy, ArrowRight, ArrowLeft } from 'lucide-react'
import { usePromptValidation } from '@/hooks/usePromptValidation'
import { getSystemPrompt } from '@/data/systemPrompts'
import ScenarioPanel from '@/components/ScenarioPanel'

// Types
interface Task {
  description: string
  frequency: string
  duration: string
}

interface WorkflowInputs {
  inputs: string
  outputs: string
  audience: string
  requirements: string
}

interface WorkflowStep {
  title: string
  what: string
  time: string
  tools: string
}

interface GeneratedWorkflow {
  steps: WorkflowStep[]
  timeSavings: {
    current: number
    new: number
    weekly: number
    monthly: number
  }
}

interface ToolRecommendation {
  name: string
  why: string
  cost: string
  learningCurve: string
  bestFor: string
}

interface ImplementationPlan {
  setup: string[]
  testing: string[]
  deployment: string[]
}

interface LabState {
  currentStep: 1 | 2 | 3 | 4 | 5 | 6
  userTasks: Task[]
  analysisResults: any
  selectedTask: Task | null
  workflowInputs: WorkflowInputs
  generatedWorkflow: string | null
  toolRecommendations: string | null
  implementationPlan: string | null
  isLoading: boolean
  error: string | null
}

// Lab content in Russian
const LAB_CONTENT = {
  title: "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
  subtitle: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò-workflow",
  objective: "–í—ã—è–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –∏–∑ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∏ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò-workflow –¥–ª—è –µ—ë –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
  timeTarget: "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 8-10 –º–∏–Ω—É—Ç",
  successCriteria: [
    "–û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
    "–°–æ–∑–¥–∞–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π 3-—ç—Ç–∞–ø–Ω—ã–π workflow",
    "–ü–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π"
  ]
}

const SCENARIO = {
  title: "–°—Ü–µ–Ω–∞—Ä–∏–π",
  description: "–í—ã ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ò–¢-–∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏. –í–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò-workflow, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ."
}

// Main lab component
export default function PersonalWorkflowBuilderLab() {
  const [state, setState] = useState<LabState>({
    currentStep: 1,
    userTasks: [{ description: '', frequency: '', duration: '' }], // Start with 1 empty task
    analysisResults: null,
    selectedTask: null,
    workflowInputs: { inputs: '', outputs: '', audience: '', requirements: '' },
    generatedWorkflow: null,
    toolRecommendations: null,
    implementationPlan: null,
    isLoading: false,
    error: null
  })

  // Debug initial state
  useEffect(() => {
    console.log('Initial state set:', state)
    console.log('Initial userTasks length:', state.userTasks.length)
    console.log('Initial userTasks:', state.userTasks)
  }, []) // Empty dependency array - runs only once on mount

  // Debug state changes
  useEffect(() => {
    console.log('State changed:', {
      isLoading: state.isLoading,
      error: state.error,
      analysisResults: state.analysisResults ? `present (length: ${state.analysisResults.length})` : 'null',
      currentStep: state.currentStep,
      userTasksLength: state.userTasks.length
    })
    
    // Additional debugging for analysisResults
    if (state.analysisResults) {
      console.log('Analysis results content preview:', state.analysisResults.substring(0, 200) + '...')
    }
  }, [state.isLoading, state.error, state.analysisResults, state.currentStep, state.userTasks.length])

  // Debug currentStep changes specifically
  useEffect(() => {
    console.log('üîÑ Current step changed to:', state.currentStep)
  }, [state.currentStep])

  // Debug generatedWorkflow changes specifically
  useEffect(() => {
    console.log('üîÑ Generated workflow changed:', state.generatedWorkflow ? `present (length: ${state.generatedWorkflow.length})` : 'null')
    if (state.generatedWorkflow) {
      console.log('Generated workflow preview:', state.generatedWorkflow.substring(0, 200) + '...')
    }
  }, [state.generatedWorkflow])

  // Component lifecycle logging
  useEffect(() => {
    console.log('PersonalWorkflowBuilderLab mounted')
    
    // Ensure we always have at least one task
    if (state.userTasks.length === 0) {
      console.log('No tasks found, adding initial task')
      setState(prev => ({
        ...prev,
        userTasks: [{ description: '', frequency: '', duration: '' }]
      }))
    }
    
    // Load persisted state from localStorage
    if (typeof window !== 'undefined') {
      const savedWorkflow = localStorage.getItem('pwb_lab_workflow')
      const savedStep = localStorage.getItem('pwb_lab_step')
      const savedAnalysis = localStorage.getItem('pwb_lab_analysis')
      const savedToolRecs = localStorage.getItem('pwb_lab_tool_recs')
      const savedImplPlan = localStorage.getItem('pwb_lab_impl_plan')
      
      if (savedWorkflow) {
        console.log('Restoring saved workflow from localStorage')
        setState(prev => ({ ...prev, generatedWorkflow: savedWorkflow }))
      }
      if (savedStep) {
        const step = parseInt(savedStep) as 1 | 2 | 3 | 4 | 5 | 6
        console.log('Restoring saved step from localStorage:', step)
        setState(prev => ({ ...prev, currentStep: step }))
      }
      if (savedAnalysis) {
        console.log('Restoring saved analysis from localStorage')
        setState(prev => ({ ...prev, analysisResults: savedAnalysis }))
      }
      if (savedToolRecs) {
        console.log('Restoring saved tool recommendations from localStorage')
        setState(prev => ({ ...prev, toolRecommendations: savedToolRecs }))
      }
      if (savedImplPlan) {
        console.log('Restoring saved implementation plan from localStorage')
        setState(prev => ({ ...prev, implementationPlan: savedImplPlan }))
      }
    }
    
    return () => {
      console.log('PersonalWorkflowBuilderLab unmounted')
    }
  }, []) // Empty dependency array - runs only once on mount

  // Persist important state to localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      if (state.generatedWorkflow) {
        localStorage.setItem('pwb_lab_workflow', state.generatedWorkflow)
      }
      if (state.currentStep > 1) {
        localStorage.setItem('pwb_lab_step', state.currentStep.toString())
      }
      if (state.analysisResults) {
        localStorage.setItem('pwb_lab_analysis', state.analysisResults)
      }
      if (state.toolRecommendations) {
        localStorage.setItem('pwb_lab_tool_recs', state.toolRecommendations)
      }
      if (state.implementationPlan) {
        localStorage.setItem('pwb_lab_impl_plan', state.implementationPlan)
      }
    }
  }, [state.generatedWorkflow, state.currentStep, state.analysisResults, state.toolRecommendations, state.implementationPlan])

  // Prevent multiple simultaneous API calls
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [analysisProgress, setAnalysisProgress] = useState<string>('')

  // Debug component re-renders
  console.log('PersonalWorkflowBuilderLab render - current state:', {
    isLoading: state.isLoading,
    error: state.error,
    analysisResults: state.analysisResults ? `present (length: ${state.analysisResults.length})` : 'null',
    currentStep: state.currentStep,
    userTasksLength: state.userTasks.length,
    isSubmitting
  })

  // Debug setState calls
  const debugSetState = (updater: any, description: string) => {
    console.log(`üîÑ setState called: ${description}`)
    if (typeof updater === 'function') {
      const prevState = state
      const newState = updater(prevState)
      console.log('Previous state:', prevState)
      console.log('New state:', newState)
      return newState
    } else {
      console.log('New state:', updater)
      return updater
    }
  }

  const setStateWithDebug = (updater: (prev: LabState) => LabState | LabState, description: string) => {
    const newState = debugSetState(updater, description)
    setState(newState)
  }

  const handleTaskSubmit = async () => {
    if (state.userTasks.length < 3 || isSubmitting) return

    console.log('=== handleTaskSubmit START ===')
    console.log('Current state:', state)
    console.log('isSubmitting:', isSubmitting)

    setIsSubmitting(true)
    setStateWithDebug(prev => ({ ...prev, isLoading: true, error: null }), 'Setting loading state to true')
    
    // Add timeout to prevent infinite loading
    const timeoutId = setTimeout(() => {
      console.log('Timeout triggered - API call took too long')
      setStateWithDebug(prev => ({ 
        ...prev, 
        isLoading: false,
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      }), 'Timeout triggered - setting error state')
      setIsSubmitting(false)
    }, 60000) // 60 second timeout (increased from 30)
    
    try {
      console.log('=== API CONNECTIVITY TEST START ===')
      setAnalysisProgress('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...')
      
      const testRes = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contextPrompt: "–¢–µ—Å—Ç API", 
          testQuestion: "–û—Ç–≤–µ—Ç—å 'API —Ä–∞–±–æ—Ç–∞–µ—Ç'", 
          model: 'gpt-4o-mini' 
        })
      })
      
      console.log('Test API response status:', testRes.status)
      console.log('Test API response ok:', testRes.ok)
      
      if (!testRes.ok) {
        const errorText = await testRes.text()
        console.error('Test API error response:', errorText)
        throw new Error(`Test API call failed: ${testRes.status} - ${errorText}`)
      }
      
      const testData = await testRes.json()
      console.log('Test API response data:', testData)
      
      if (!testData.content) {
        console.error('Test API returned no content:', testData)
        throw new Error('Test API returned no content')
      }
      
      console.log('=== API CONNECTIVITY TEST PASSED ===')
      console.log('Proceeding with main analysis...')
      setAnalysisProgress('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...')
      
    } catch (err) {
      console.error('=== API CONNECTIVITY TEST FAILED ===')
      console.error('Error details:', err)
      clearTimeout(timeoutId)
      setStateWithDebug(prev => ({ 
        ...prev, 
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.`,
        isLoading: false 
      }), 'Setting error state after API connectivity test failure')
      setIsSubmitting(false)
      return
    }
    
    console.log('=== MAIN ANALYSIS START ===')
    setAnalysisProgress('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑...')
    
    const analysisPrompt = `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ò–ú–ï–ù–ù–û –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (—è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏), –∞ –ù–ï —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

–ó–ê–î–ê–ß–ò:
${state.userTasks.map((task, i) => `${i + 1}. ${task.description} (${task.frequency}, ${task.duration})`).join('\n')}

–í–ê–ñ–ù–û: –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
- ChatGPT, Claude, Gemini –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
- –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –≤ Google Sheets (=AI, =GOOGLETRANSLATE, etc.)
- –ò–ò-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Excel (Copilot, Power Query —Å –ò–ò)
- Zapier/Make —Å –ò–ò-—à–∞–≥–∞–º–∏
- Prompt-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ: Power BI, Tableau, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ BI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ 1-5:
1. –ß–∞—Å—Ç–æ—Ç–∞ (1=—Ä–∞–∑ –≤ –º–µ—Å—è—Ü, 5=–µ–∂–µ–¥–Ω–µ–≤–Ω–æ+)
2. –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å (1=–æ—á–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, 5=–æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑)
3. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞/–¥–∞–Ω–Ω—ã—Ö (1=–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞/–¥–∞–Ω–Ω—ã—Ö, 5=–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
4. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è (1=—ç–∫–æ–Ω–æ–º–∏—è <10 –º–∏–Ω, 5=—ç–∫–æ–Ω–æ–º–∏—è —á–∞—Å–æ–≤)
5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (1=—Ç—Ä–µ–±—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Å—É–∂–¥–µ–Ω–∏–π, 5=–ª–µ–≥–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è)

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å—Ç–µ –¢–û–õ–¨–ö–û –≤ —ç—Ç–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

{
  "task1": {
    "name": "–∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    "scores": {"frequency": X, "predictability": X, "languageIntensity": X, "timeImpact": X, "feasibility": X},
    "totalScore": X,
    "strengths": "–ø–æ—á–µ–º—É —Ö–æ—Ä–æ—à–æ –¥–ª—è –ò–ò",
    "challenges": "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
  },
  "task2": {
    "name": "–∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    "scores": {"frequency": X, "predictability": X, "languageIntensity": X, "timeImpact": X, "feasibility": X},
    "totalScore": X,
    "strengths": "–ø–æ—á–µ–º—É —Ö–æ—Ä–æ—à–æ –¥–ª—è –ò–ò",
    "challenges": "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
  },
  "task3": {
    "name": "–∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    "scores": {"frequency": X, "predictability": X, "languageIntensity": X, "timeImpact": X, "feasibility": X},
    "totalScore": X,
    "strengths": "–ø–æ—á–µ–º—É —Ö–æ—Ä–æ—à–æ –¥–ª—è –ò–ò",
    "challenges": "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
  }
}

–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON. –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.`

    try {
      console.log('Submitting analysis prompt...')
      console.log('Current state before API call:', { isLoading: state.isLoading, error: state.error })
      
      // Use the same API format as the working context-window-lab
      const res = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contextPrompt: analysisPrompt, 
          testQuestion: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ò–ò", 
          model: 'gpt-4o-mini' 
        })
      })
      
      console.log('Main analysis API response status:', res.status)
      console.log('Main analysis API response ok:', res.ok)
      
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        console.error('Main analysis API error response:', err)
        throw new Error(`Main analysis API call failed: ${res.status} - ${err?.details || 'Unknown error'}`)
      }
      
      const data = await res.json()
      console.log('Main analysis API response data:', data)
      
      const response = data?.content || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
      
      console.log('Analysis response received, length:', response.length)
      console.log('Response preview:', response.substring(0, 200) + '...')
      
      clearTimeout(timeoutId)
      
      console.log('Setting state with analysis results and advancing to step 2...')
      setState(prev => {
        console.log('Previous state:', prev)
        const newState = { 
          ...prev, 
          analysisResults: response,
          isLoading: false,
          error: null,
          currentStep: 2 as 1 | 2 | 3 | 4 | 5 | 6
        }
        console.log('New state:', newState)
        return newState
      })
      
      console.log('State update completed')
      setIsSubmitting(false)
      
      // Add a small delay to ensure state is properly updated before logging
      setTimeout(() => {
        console.log('State after update (delayed check):', {
          analysisResults: state.analysisResults ? `present (length: ${state.analysisResults.length})` : 'null',
          currentStep: state.currentStep
        })
      }, 100)
      
    } catch (err) {
      console.error('=== MAIN ANALYSIS ERROR ===')
      console.error('Error details:', err)
      clearTimeout(timeoutId)
      
      // Provide fallback response for testing
      const fallbackResponse = `–ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ:

**–ó–∞–¥–∞—á–∞ 1: [–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]**
- –û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: 18/25
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —à–∞–≥–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

**–ó–∞–¥–∞—á–∞ 2: [–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]**
- –û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: 15/25
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

**–ó–∞–¥–∞—á–∞ 3: [–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]**
- –û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: 12/25
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø—Ä–æ—Ü–µ—Å—Å
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –¢—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ó–∞–¥–∞—á–µ 1 –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ò–ò-workflow.`
      
      setStateWithDebug(prev => ({ 
        ...prev, 
        analysisResults: fallbackResponse,
        isLoading: false,
        error: null
      }), 'Setting state with fallback analysis results')
      setIsSubmitting(false)
    }
  }

  const handleWorkflowGeneration = async () => {
    if (!state.selectedTask || !state.workflowInputs.inputs || !state.workflowInputs.outputs || !state.workflowInputs.audience) return

    setState(prev => ({ ...prev, isLoading: true }))
    
    const workflowPrompt = `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –ò–ú–ï–ù–ù–û –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (—è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏), –∞ –ù–ï —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

–ó–ê–î–ê–ß–ê: ${state.selectedTask.description}
–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï: ${state.workflowInputs.inputs}
–ñ–ï–õ–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${state.workflowInputs.outputs}
–ê–£–î–ò–¢–û–†–ò–Ø: ${state.workflowInputs.audience}
–¢–†–ï–ë–û–í–ê–ù–ò–Ø: ${state.workflowInputs.requirements}

–í–ê–ñ–ù–û: –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
- ChatGPT, Claude, Gemini –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
- –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –≤ Google Sheets (=AI, =GOOGLETRANSLATE, etc.)
- –ò–ò-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è Excel (Copilot, Power Query —Å –ò–ò)
- Zapier/Make —Å –ò–ò-—à–∞–≥–∞–º–∏
- Prompt-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ: Power BI, Tableau, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ BI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ workflow —Å —ç—Ç–æ–π —Ç–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

## –≠—Ç–∞–ø 1: –ò–ò-–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
- –ß—Ç–æ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤]
- –í—Ä–µ–º—è: [–æ—Ü–µ–Ω–æ—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã]
- –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã]
- –ü—Ä–æ–º–ø—Ç-–ø—Ä–∏–º–µ—Ä: [–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞]

## –≠—Ç–∞–ø 2: –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
- –ß—Ç–æ: [–æ–ø–∏—Å–∞–Ω–∏–µ –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö]
- –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç]
- –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞: 
\`\`\`
–†–æ–ª—å: [—Ä–æ–ª—å –¥–ª—è –ò–ò]
–¶–µ–ª—å: [—á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –ò–ò]
–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [—á—Ç–æ –¥–∞—Ç—å –ò–ò]
–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: [–∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç]
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: [—Ä–∞–º–∫–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è]
\`\`\`
- –í—Ä–µ–º—è: [–æ—Ü–µ–Ω–æ—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã]

## –≠—Ç–∞–ø 3: –ò–ò-—Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ß—Ç–æ: [—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞]
- –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏]
- –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç: [–ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞]
- –í—Ä–µ–º—è: [–æ—Ü–µ–Ω–æ—á–Ω—ã–µ –º–∏–Ω—É—Ç—ã]

## –ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
- –í—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: [–æ—Ü–µ–Ω–∫–∞]
- –í—Ä–µ–º—è –ò–ò-–ø—Ä–æ—Ü–µ—Å—Å–∞: [—Å—É–º–º–∞ —ç—Ç–∞–ø–æ–≤]
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: [—Ä–∞—Å—á—ë—Ç]
- –ú–µ—Å—è—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: [–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è * 4]

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∞ –Ω–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É.`

    try {
      const res = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contextPrompt: workflowPrompt, 
          testQuestion: "–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π 3-—ç—Ç–∞–ø–Ω—ã–π workflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏", 
          model: 'gpt-4o-mini' 
        })
      })
      
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err?.details || `API error: ${res.status}`)
      }
      
      const data = await res.json()
      const response = data?.content || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
      
      console.log('About to set state with workflow generation results...')
      console.log('Response content length:', response.length)
      console.log('Response preview:', response.substring(0, 200) + '...')
      
      setState(prev => {
        console.log('Previous state before workflow update:', prev)
        const newState = { 
          ...prev, 
          generatedWorkflow: response,
          isLoading: false,
          currentStep: 4 as 1 | 2 | 3 | 4 | 5 | 6
        }
        console.log('New state for workflow update:', newState)
        return newState
      })
      
      console.log('Workflow generation completed and advanced to step 4')
      console.log('Generated workflow content length:', response.length)
      console.log('Generated workflow preview:', response.substring(0, 200) + '...')
      
      // Add a small delay to ensure state is properly updated before logging
      setTimeout(() => {
        console.log('State after workflow generation (delayed check):', {
          generatedWorkflow: state.generatedWorkflow ? `present (length: ${state.generatedWorkflow.length})` : 'null',
          currentStep: state.currentStep
        })
      }, 100)
      
    } catch (err) {
      setStateWithDebug(prev => ({ 
        ...prev, 
        error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ workflow',
        isLoading: false 
      }), 'Setting error state after workflow generation failure')
    }
  }

  const handleToolRecommendations = async () => {
    if (!state.selectedTask) return

    setStateWithDebug(prev => ({ ...prev, isLoading: true }), 'Setting loading state for tool recommendations')
    
    const toolPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ workflow: ${state.generatedWorkflow}

–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –¢–û–õ–¨–ö–û –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ò—Å–∫–ª—é—á–∏—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ BI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.

–†–ê–ó–†–ï–®–ï–ù–ù–´–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
1. –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã: ChatGPT, Claude, Gemini, Copilot
2. –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: Google Sheets AI, Excel Copilot
3. –ò–ò-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: Zapier —Å –ò–ò-—à–∞–≥–∞–º–∏, Make —Å –ò–ò
4. –ò–ò-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: Office 365 Copilot, Google Workspace AI
5. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ò–ò: –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø–µ—Ä–µ–≤–æ–¥–∞, –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞

–ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Power BI, Tableau, Qlik, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ ETL-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Å–ª–æ–∂–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ë–ï–ó –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

–î–ª—è –∑–∞–¥–∞—á–∏ "${state.selectedTask.description}" –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ:

## –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: [–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç]
- –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –ò–ò-—Ä–µ—à–µ–Ω–∏–µ: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ò–ò-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏]
- –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: [—Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π]
- –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: [–≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç]
- –°—Ç–æ–∏–º–æ—Å—Ç—å: [–±–µ—Å–ø–ª–∞—Ç–Ω–æ/–ø–ª–∞—Ç–Ω–æ]
- –ö—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è: [–ª–µ–≥–∫–æ/—Å—Ä–µ–¥–Ω–µ/—Å–ª–æ–∂–Ω–æ]

## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ò–ò-–≤–∞—Ä–∏–∞–Ω—Ç—ã:
1. [–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 2]: [–ø–æ—á–µ–º—É –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ + –ò–ò-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏]
2. [–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 3]: [–ø–æ—á–µ–º—É –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ + –ò–ò-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏]

## –ò–ò-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
–ö–∞–∫ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫:
[–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö] ‚Üí [–ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞] ‚Üí [–ò–ò-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] ‚Üí [–†–µ–∑—É–ª—å—Ç–∞—Ç]

## –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: [–≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç]
2. –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: [–≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç] 
3. –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: [–≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç]

## –ó–∞–º–µ—Ç–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö:
[–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤]

–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –¢–û–õ–¨–ö–û –Ω–∞ –ò–ò-—Ä–µ—à–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.`

    try {
      const res = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contextPrompt: toolPrompt, 
          testQuestion: "–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏", 
          model: 'gpt-4o-mini' 
        })
      })
      
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err?.details || `API error: ${res.status}`)
      }
      
      const data = await res.json()
      const response = data?.content || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
      
      setState(prev => ({ 
        ...prev, 
        toolRecommendations: response,
        isLoading: false
      }))
      
      console.log('Tool recommendations completed, staying on step 5')
      
    } catch (err) {
      setStateWithDebug(prev => ({ 
        ...prev, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        isLoading: false 
      }), 'Setting error state after tool recommendations failure')
    }
  }

  const handleImplementationPlan = async () => {
    if (!state.selectedTask) return

    setStateWithDebug(prev => ({ ...prev, isLoading: true }), 'Setting loading state for implementation plan')
    
    const planPrompt = `–°–æ–∑–¥–∞–π—Ç–µ 7-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏:

–ó–ê–î–ê–ß–ê: ${state.selectedTask.description}
–ò–ù–°–¢–†–£–ú–ï–ù–¢: ${state.toolRecommendations ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' : '–ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'}

–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω —Å —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

## –î–µ–Ω—å 1-2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞
- [ ] –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- [ ] –í—Ä–µ–º—è: X –º–∏–Ω—É—Ç

## –î–µ–Ω—å 3-4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  
- [ ] –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –í—Ä–µ–º—è: X –º–∏–Ω—É—Ç

## –î–µ–Ω—å 5-7: –í–Ω–µ–¥—Ä–µ–Ω–∏–µ
- [ ] –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
- [ ] –í—Ä–µ–º—è: X –º–∏–Ω—É—Ç

## –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞
- –ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
- –ö–∞–∫ –∏–∑–º–µ—Ä—è—Ç—å

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`

    try {
      const res = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contextPrompt: planPrompt, 
          testQuestion: "–°–æ–∑–¥–∞–π—Ç–µ 7-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏", 
          model: 'gpt-4o-mini' 
        })
      })
      
      if (!res.ok) {
        const err = await res.json().catch(() => ({}))
        throw new Error(err?.details || `API error: ${res.status}`)
      }
      
      const data = await res.json()
      const response = data?.content || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞'
      
      setState(prev => ({ 
        ...prev, 
        implementationPlan: response,
        isLoading: false,
        currentStep: 6 as 1 | 2 | 3 | 4 | 5 | 6
      }))
      
      console.log('Implementation plan completed on step 6')
      
    } catch (err) {
      setStateWithDebug(prev => ({ 
        ...prev, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞',
        isLoading: false 
      }), 'Setting error state after implementation plan failure')
    }
  }

  const nextStep = () => {
    setState(prev => ({ ...prev, currentStep: Math.min(6, prev.currentStep + 1) as any }))
  }

  const prevStep = () => {
    setState(prev => ({ ...prev, currentStep: Math.max(1, prev.currentStep - 1) as any }))
  }

  const addTask = () => {
    if (state.userTasks.length < 3) {
      setState(prev => ({
        ...prev,
        userTasks: [...prev.userTasks, { description: '', frequency: '', duration: '' }]
      }))
    }
  }

  const updateTask = (index: number, field: keyof Task, value: string) => {
    setState(prev => ({
      ...prev,
      userTasks: prev.userTasks.map((task, i) => 
        i === index ? { ...task, [field]: value } : task
      )
    }))
  }

  const removeTask = (index: number) => {
    // Prevent removing the last task - always keep at least one
    if (state.userTasks.length > 1) {
      setState(prev => ({
        ...prev,
        userTasks: prev.userTasks.filter((_, i) => i !== index)
      }))
    }
  }

  const canProceedToStep2 = state.userTasks.length >= 3 && 
    state.userTasks.every(task => task.description.trim().length > 5 && task.frequency.trim().length > 0 && task.duration.trim().length > 0)

  const canProceedToStep4 = state.selectedTask && 
    state.workflowInputs.inputs && 
    state.workflowInputs.outputs && 
    state.workflowInputs.audience

  const progress = (state.currentStep / 6) * 100

  // Format JSON response for better readability
  const formatAnalysisResults = (results: string) => {
    try {
      // Extract JSON from the response (handle cases where there's extra text)
      let jsonString = results
      
      // Remove markdown code blocks if present
      jsonString = jsonString.replace(/```json\n?|\n?```/g, '')
      
      // Find the JSON object boundaries
      const jsonStart = jsonString.indexOf('{')
      const jsonEnd = jsonString.lastIndexOf('}')
      
      if (jsonStart === -1 || jsonEnd === -1) {
        throw new Error('No valid JSON found in response')
      }
      
      // Extract only the JSON portion
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1)
      
      console.log('Extracted JSON string:', jsonString.substring(0, 200) + '...')
      
      // Parse the JSON
      const jsonData = JSON.parse(jsonString)
      
      // Extract recommendation text (everything after the JSON)
      const recommendationText = results.substring(jsonEnd + 1).trim()
      
      // Clean up the recommendation text
      const cleanRecommendation = recommendationText
        .replace(/^[^–∞-—è—ë]*/i, '') // Remove non-Russian text at the beginning
        .replace(/```.*$/, '') // Remove any remaining markdown code blocks
        .replace(/^\s*[}\s]*/, '') // Remove any leftover JSON closing braces and whitespace
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Convert markdown bold to HTML bold
        .replace(/\(task\d+\)/gi, '') // Remove English task references like (task2)
        .trim()
      
      console.log('Original recommendation text:', recommendationText)
      console.log('Cleaned recommendation text:', cleanRecommendation)
      
      return (
        <div className="space-y-6">
          <div className="bg-blue-50 dark:bg-blue-950/20 border-l-4 border-blue-500 p-4 rounded-r-lg">
            <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2">
              üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </h3>
            <p className="text-blue-800 dark:text-blue-200">
              –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏ –æ—Ü–µ–Ω–∏–ª –∏—Ö –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–º–∞–∫—Å–∏–º—É–º 25 –±–∞–ª–ª–æ–≤).
            </p>
          </div>
          
          <div className="bg-amber-50 dark:bg-amber-950/20 border-l-4 border-amber-500 p-4 rounded-r-lg">
            <h4 className="text-lg font-semibold text-amber-900 dark:text-amber-100 mb-2">
              üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </h4>
            <p className="text-amber-800 dark:text-amber-200">
              –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∞–ª–ª–æ–º.
            </p>
          </div>
          
          {Object.entries(jsonData).map(([taskKey, taskData]: [string, any]) => (
            <div key={taskKey} className={`border rounded-lg p-4 cursor-pointer transition-all ${
              state.selectedTask?.description === taskData.name 
                ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20' 
                : 'bg-gray-50 dark:bg-gray-900/20 hover:border-gray-300'
            }`} onClick={() => setState(prev => ({ ...prev, selectedTask: { 
              description: taskData.name, 
              frequency: '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', 
              duration: '–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–¥–∞—á–∏' 
            }}))}>
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                  {taskData.name}
                </h4>
                {state.selectedTask?.description === taskData.name && (
                  <div className="text-blue-600 dark:text-blue-400">
                    <CheckCircle className="w-5 h-5" />
                  </div>
                )}
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-400">–ß–∞—Å—Ç–æ—Ç–∞:</span>
                    <span className="font-medium">{taskData.scores.frequency}/5</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-400">–ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å:</span>
                    <span className="font-medium">{taskData.scores.predictability}/5</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-400">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</span>
                    <span className="font-medium">{taskData.scores.languageIntensity}/5</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-400">–í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è:</span>
                    <span className="font-medium">{taskData.scores.timeImpact}/5</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 dark:text-gray-400">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:</span>
                    <span className="font-medium">{taskData.scores.feasibility}/5</span>
                  </div>
                </div>
                
                <div className="text-center">
                  <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
                    {taskData.totalScore}/25
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">
                    –û–±—â–∏–π –±–∞–ª–ª
                  </div>
                </div>
              </div>
              
              <div className="space-y-3">
                <div>
                  <h5 className="font-medium text-green-700 dark:text-green-300 mb-1">‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</h5>
                  <p className="text-sm text-gray-700 dark:text-gray-300">{taskData.strengths}</p>
                </div>
                <div>
                  <h5 className="font-medium text-amber-700 dark:text-amber-300 mb-1">‚ö†Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç–∏:</h5>
                  <p className="text-sm text-gray-700 dark:text-gray-300">{taskData.challenges}</p>
                </div>
              </div>
            </div>
          ))}
          
          <div className="bg-green-50 dark:bg-green-950/20 border-l-4 border-green-500 p-4 rounded-r-lg">
            <h3 className="text-lg font-semibold text-green-900 dark:text-green-100 mb-2">
              üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            </h3>
            <div 
              className="text-green-800 dark:text-green-200"
              dangerouslySetInnerHTML={{ __html: cleanRecommendation || '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∑–∞–¥–∞—á–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –±–∞–ª–ª–æ–º –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ò–ò-workflow.' }}
            />
          </div>
        </div>
      )
    } catch (error) {
      // Fallback to raw display if JSON parsing fails
      console.warn('Failed to parse JSON, falling back to raw display:', error)
      console.log('Raw response that failed to parse:', results)
      
      // Try to provide a more helpful fallback
      return (
        <div className="space-y-6">
          <div className="bg-red-50 dark:bg-red-950/20 border-l-4 border-red-500 p-4 rounded-r-lg">
            <h3 className="text-lg font-semibold text-red-900 dark:text-red-100 mb-2">
              ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
            </h3>
            <p className="text-red-800 dark:text-red-200">
              –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
            </p>
          </div>
          
          <div className="prose dark:prose-invert max-w-none">
            <h4 className="text-lg font-semibold mb-3">–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</h4>
            <div className="bg-gray-100 dark:bg-gray-800 p-4 rounded text-sm">
              <pre className="whitespace-pre-wrap">{results}</pre>
            </div>
          </div>
          
          <div className="flex justify-center">
            <Button onClick={() => window.location.reload()} variant="outline">
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </div>
      )
    }
  }

  // Format markdown content for proper HTML rendering
  const formatMarkdownContent = (content: string) => {
    return content
      // Convert markdown headers to HTML (styling handled by CSS)
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^#### (.*$)/gim, '<h4>$1</h4>')
      // Convert markdown bold to HTML
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // Convert markdown italic to HTML
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      // Convert markdown lists to regular paragraphs (remove bullet points)
      .replace(/^- (.*$)/gim, '<p class="mb-2">$1</p>')
      .replace(/^(\d+)\. (.*$)/gim, '<p class="mb-2">$1. $2</p>')
      // Convert single newlines to line breaks
      .replace(/\n/g, '<br>')
      // Clean up extra line breaks
      .replace(/<br><br>/g, '<br>')
      // Clean up line breaks before paragraphs
      .replace(/<br>(<p)/g, '$1')
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold">{LAB_CONTENT.title}</h1>
        <p className="text-xl text-gray-600 dark:text-gray-400">{LAB_CONTENT.subtitle}</p>
        <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
          <Clock className="w-4 h-4" />
          <span>{LAB_CONTENT.timeTarget}</span>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="space-y-2">
        <div className="flex justify-between text-sm">
          <span>–®–∞–≥ {state.currentStep} –∏–∑ 6</span>
          <span>{Math.round(progress)}%</span>
        </div>
        <Progress value={progress} className="w-full" />
      </div>

      {/* Scenario Panel */}
      <ScenarioPanel 
        title={SCENARIO.title}
        description={SCENARIO.description}
      />

      {/* Step Content */}
      {state.currentStep === 1 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            –û–ø–∏—à–∏—Ç–µ 3 –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏–ª–∏ —á–∞—â–µ) –∏ –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∂—É—Ç—Å—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –∏–ª–∏ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã–º–∏.
          </p>
          
          <div className="space-y-4">
            {state.userTasks.map((task, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-3">
                <div className="flex justify-between items-center">
                  <h3 className="font-medium">–ó–∞–¥–∞—á–∞ {index + 1}</h3>
                  {state.userTasks.length > 1 && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeTask(index)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  )}
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label htmlFor={`task-description-${index}`} className="block text-sm font-medium mb-1">–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</label>
                    <textarea
                      id={`task-description-${index}`}
                      name={`task-description-${index}`}
                      className="w-full p-2 border rounded-md"
                      placeholder="–û–ø–∏—à–∏—Ç–µ, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–∞..."
                      value={task.description}
                      onChange={(e) => updateTask(index, 'description', e.target.value)}
                      rows={3}
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label htmlFor={`task-frequency-${index}`} className="block text-sm font-medium mb-1">–ß–∞—Å—Ç–æ—Ç–∞</label>
                      <input
                        id={`task-frequency-${index}`}
                        name={`task-frequency-${index}`}
                        type="text"
                        className="w-full p-2 border rounded-md"
                        placeholder="–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ..."
                        value={task.frequency}
                        onChange={(e) => updateTask(index, 'frequency', e.target.value)}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor={`task-duration-${index}`} className="block text-sm font-medium mb-1">–í—Ä–µ–º—è</label>
                      <input
                        id={`task-duration-${index}`}
                        name={`task-duration-${index}`}
                        type="text"
                        className="w-full p-2 border rounded-md"
                        placeholder="30 –º–∏–Ω—É—Ç, 2 —á–∞—Å–∞..."
                        value={task.duration}
                        onChange={(e) => updateTask(index, 'duration', e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
            ))}
            
            {state.userTasks.length < 3 && (
              <Button onClick={addTask} variant="outline" className="w-full">
                + –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
              </Button>
            )}
          </div>
          
          <div className="mt-6 flex justify-end">
            {/* Debug info */}
            <div className="mr-4 text-sm text-gray-500">
              <div>–ó–∞–¥–∞—á: {state.userTasks.length}/3</div>
              <div>–í–∞–ª–∏–¥–Ω—ã—Ö: {state.userTasks.filter(task => 
                task.description.trim().length > 5 && 
                task.frequency.trim().length > 0 && 
                task.duration.trim().length > 0
              ).length}/3</div>
            </div>
            <Button 
              onClick={handleTaskSubmit}
              disabled={!canProceedToStep2 || state.isLoading}
              className="ml-auto"
            >
              {state.isLoading 
                ? (analysisProgress || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...') 
                : state.analysisResults 
                  ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É'
                  : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É'
              }
            </Button>
          </div>
        </Card>
      )}

      {state.currentStep === 2 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>
          
          {/* Debug info */}
          <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-800 rounded text-sm">
            <div>Debug: currentStep = {state.currentStep}</div>
            <div>Debug: analysisResults exists = {state.analysisResults ? 'Yes' : 'No'}</div>
            <div>Debug: analysisResults length = {state.analysisResults ? state.analysisResults.length : 'N/A'}</div>
            <div>Debug: isLoading = {state.isLoading ? 'Yes' : 'No'}</div>
            <div>Debug: error = {state.error || 'None'}</div>
          </div>
          
          {state.analysisResults ? (
            <div className="space-y-4">
              {formatAnalysisResults(state.analysisResults)}
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button onClick={nextStep}>
                  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-gray-100 mx-auto mb-4"></div>
              <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...</p>
            </div>
          )}
        </Card>
      )}

      {state.currentStep === 3 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 3: –î–∏–∑–∞–π–Ω workflow</h2>
          
          {/* Debug info */}
          <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-800 rounded text-sm">
            <div>Debug: currentStep = {state.currentStep}</div>
            <div>Debug: selectedTask = {state.selectedTask ? 'Yes' : 'No'}</div>
            <div>Debug: inputs = {state.workflowInputs.inputs ? 'Yes' : 'No'}</div>
            <div>Debug: outputs = {state.workflowInputs.outputs ? 'Yes' : 'No'}</div>
            <div>Debug: audience = {state.workflowInputs.audience ? 'Yes' : 'No'}</div>
            <div>Debug: canProceedToStep4 = {canProceedToStep4 ? 'Yes' : 'No'}</div>
            <div>Debug: isLoading = {state.isLoading ? 'Yes' : 'No'}</div>
          </div>
          
          {state.selectedTask && (
            <div className="bg-blue-50 dark:bg-blue-950/20 border-l-4 border-blue-500 p-4 rounded-r-lg mb-6">
              <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2">
                üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
              </h3>
              <p className="text-blue-800 dark:text-blue-200">
                <strong>{state.selectedTask.description}</strong>
              </p>
            </div>
          )}
          
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤–∞—à –ò–ò-workflow –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª—É—á—à–∏–π workflow –¥–ª—è –≤–∞—Å.
          </p>
          
          <div className="space-y-4">
            <div>
              <label htmlFor="workflow-inputs" className="block text-sm font-medium mb-1">–ö–∞–∫–∏–µ –æ–±—ã—á–Ω–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏?</label>
              <textarea
                id="workflow-inputs"
                name="workflow-inputs"
                className="w-full p-2 border rounded-md"
                placeholder="—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–∞–Ω–Ω—ã–µ, –∏ —Ç.–¥."
                value={state.workflowInputs.inputs}
                onChange={(e) => setState(prev => ({
                  ...prev,
                  workflowInputs: { ...prev.workflowInputs, inputs: e.target.value }
                }))}
                rows={3}
              />
            </div>
            
            <div>
              <label htmlFor="workflow-outputs" className="block text-sm font-medium mb-1">–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?</label>
              <textarea
                id="workflow-outputs"
                name="workflow-outputs"
                className="w-full p-2 border rounded-md"
                placeholder="—Ñ–æ—Ä–º–∞—Ç, –¥–ª–∏–Ω–∞, —Å—Ç–∏–ª—å..."
                value={state.workflowInputs.outputs}
                onChange={(e) => setState(prev => ({
                  ...prev,
                  workflowInputs: { ...prev.workflowInputs, outputs: e.target.value }
                }))}
                rows={3}
              />
            </div>
            
            <div>
              <label htmlFor="workflow-audience" className="block text-sm font-medium mb-1">–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?</label>
              <input
                id="workflow-audience"
                name="workflow-audience"
                type="text"
                className="w-full p-2 border rounded-md"
                placeholder="—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ–º–∞–Ω–¥–∞..."
                value={state.workflowInputs.audience}
                onChange={(e) => setState(prev => ({
                  ...prev,
                  workflowInputs: { ...prev.workflowInputs, audience: e.target.value }
                }))}
              />
            </div>
            
            <div>
              <label htmlFor="workflow-requirements" className="block text-sm font-medium mb-1">–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?</label>
              <textarea
                id="workflow-requirements"
                name="workflow-requirements"
                className="w-full p-2 border rounded-md"
                placeholder="–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ñ–æ—Ä–º–∞—Ç—É, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
                value={state.workflowInputs.requirements}
                onChange={(e) => setState(prev => ({
                  ...prev,
                  workflowInputs: { ...prev.workflowInputs, requirements: e.target.value }
                }))}
                rows={2}
              />
            </div>
          </div>
          
          <div className="mt-6 flex justify-between">
            <Button onClick={prevStep} variant="outline">
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <Button 
              onClick={handleWorkflowGeneration}
              disabled={!canProceedToStep4 || state.isLoading}
            >
              {state.isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å workflow'}
            </Button>
          </div>
        </Card>
      )}

      {state.currentStep === 4 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 4: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow</h2>
          
          {/* Debug info */}
          <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-800 rounded text-sm">
            <div>Debug: currentStep = {state.currentStep}</div>
            <div>Debug: generatedWorkflow exists = {state.generatedWorkflow ? 'Yes' : 'No'}</div>
            <div>Debug: generatedWorkflow length = {state.generatedWorkflow ? state.generatedWorkflow.length : 'N/A'}</div>
            <div>Debug: isLoading = {state.isLoading ? 'Yes' : 'No'}</div>
            <div>Debug: error = {state.error || 'None'}</div>
            <div className="mt-2">
              <Button 
                                  onClick={() => {
                    localStorage.removeItem('pwb_lab_workflow')
                    localStorage.removeItem('pwb_lab_step')
                    localStorage.removeItem('pwb_lab_analysis')
                    localStorage.removeItem('pwb_lab_tool_recs')
                    localStorage.removeItem('pwb_lab_impl_plan')
                    window.location.reload()
                  }}
                variant="outline"
                size="sm"
              >
                Clear localStorage & Restart
              </Button>
            </div>
          </div>
          
          {state.generatedWorkflow ? (
            <div className="space-y-4">
              <div className="bg-blue-50 dark:bg-blue-950/20 border-l-4 border-blue-500 p-4 rounded-r-lg">
                <p className="text-blue-800 dark:text-blue-200">
                  <strong>–û—Ç–ª–∏—á–Ω–æ!</strong> –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –≤–æ—Ç –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ò–ò-workflow.
                </p>
              </div>
              
              <div className="prose dark:prose-invert max-w-none">
                <div 
                  className="workflow-content ml-6"
                  dangerouslySetInnerHTML={{ __html: formatMarkdownContent(state.generatedWorkflow) }} 
                />
              </div>
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button onClick={nextStep}>
                  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 dark:border-gray-100 mx-auto mb-4"></div>
              <p>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à workflow...</p>
            </div>
          )}
        </Card>
      )}

      {state.currentStep === 5 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</h2>
          
          {/* Debug info */}
          <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-800 rounded text-sm">
            <div>Debug: currentStep = {state.currentStep}</div>
            <div>Debug: toolRecommendations exists = {state.toolRecommendations ? 'Yes' : 'No'}</div>
            <div>Debug: toolRecommendations length = {state.toolRecommendations ? state.toolRecommendations.length : 'N/A'}</div>
            <div>Debug: isLoading = {state.isLoading ? 'Yes' : 'No'}</div>
            <div>Debug: error = {state.error || 'None'}</div>
          </div>
          
          {state.toolRecommendations ? (
            <div className="space-y-4">
              <div className="prose dark:prose-invert max-w-none">
                <div 
                  className="workflow-content ml-6"
                  dangerouslySetInnerHTML={{ __html: formatMarkdownContent(state.toolRecommendations) }} 
                />
              </div>
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button onClick={nextStep}>
                  –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <p className="text-gray-600 dark:text-gray-400">
                –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è –≤–∞—à–µ–≥–æ workflow.
              </p>
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button 
                  onClick={handleToolRecommendations}
                  disabled={state.isLoading}
                >
                  {state.isLoading ? '–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...' : '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
                </Button>
              </div>
            </div>
          )}
        </Card>
      )}

      {state.currentStep === 6 && (
        <Card className="p-6">
          <h2 className="text-2xl font-semibold mb-4">–®–∞–≥ 6: –ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç</h2>
          
          {/* Debug info */}
          <div className="mb-4 p-3 bg-gray-100 dark:bg-gray-800 rounded text-sm">
            <div>Debug: currentStep = {state.currentStep}</div>
            <div>Debug: implementationPlan exists = {state.implementationPlan ? 'Yes' : 'No'}</div>
            <div>Debug: implementationPlan length = {state.implementationPlan ? state.implementationPlan.length : 'N/A'}</div>
            <div>Debug: isLoading = {state.isLoading ? 'Yes' : 'No'}</div>
            <div>Debug: error = {state.error || 'None'}</div>
          </div>
          
          {state.implementationPlan ? (
            <div className="space-y-6">
              <div className="prose dark:prose-invert max-w-none">
                <div 
                  className="workflow-content ml-6"
                  dangerouslySetInnerHTML={{ __html: formatMarkdownContent(state.implementationPlan) }} 
                />
              </div>
              
              <div className="bg-green-50 dark:bg-green-950/20 border-l-4 border-green-500 p-4 rounded-r-lg">
                <h3 className="text-lg font-semibold text-green-800 dark:text-green-200 mb-2">
                  üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à –ø–µ—Ä–≤—ã–π –ò–ò-workflow!
                </h3>
                <p className="text-green-700 dark:text-green-300">
                  –£ –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.
                </p>
              </div>
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button onClick={() => window.print()}>
                  <Download className="w-4 h-4 mr-2" />
                  –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –ø–ª–∞–Ω
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <p className="text-gray-600 dark:text-gray-400">
                –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤–∞—à–µ–≥–æ workflow.
              </p>
              
              <div className="flex justify-between">
                <Button onClick={prevStep} variant="outline">
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button 
                  onClick={handleImplementationPlan}
                  disabled={state.isLoading}
                >
                  {state.isLoading ? '–°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω...' : '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è'}
                </Button>
              </div>
            </div>
          )}
        </Card>
      )}

      {/* Error Display */}
      {state.error && (
        <Card className="p-4 border-red-200 bg-red-50 dark:bg-red-950/20">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 text-red-800 dark:text-red-200">
              <AlertCircle className="w-5 h-5" />
              <span>{state.error}</span>
            </div>
            <Button 
              onClick={() => setState(prev => ({ ...prev, error: null }))}
              variant="outline"
              size="sm"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
          </div>
        </Card>
      )}
    </div>
  )
}
